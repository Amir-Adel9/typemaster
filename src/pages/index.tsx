import { type NextPage } from 'next';
import Head from 'next/head';

import { trpc } from '../utils/trpc';
import { FormEvent, useEffect, useRef, useState } from 'react';

import { useQuery } from '@tanstack/react-query';
import Link from 'next/link';
import router from 'next/router';

const Home: NextPage = () => {
  const [displayName, setDisplayName] = useState('');

  useEffect(() => {
    const storedDisplayName = localStorage.getItem('displayName') as string;
    const isRegistered = storedDisplayName ? true : false;
    if (!isRegistered) {
      router.push('/register');
      return;
    } else {
      setDisplayName(storedDisplayName);
    }
  }, []);

  const { isLoading, refetch } = useQuery(
    ['randomWords'],
    () =>
      fetch('https://random-word-api.herokuapp.com/word?number=5').then((res) =>
        res.json()
      ),
    {
      refetchOnWindowFocus: false,
      onSuccess: (data) => {
        setWords(data);
      },
    }
  );

  const [count, setCount] = useState(5);
  const [words, setWords] = useState(['']);
  const [currentWord, setCurrentWord] = useState('');
  const [gameResult, setGameResult] = useState('');

  const inputRef = useRef() as React.MutableRefObject<HTMLInputElement>;

  const currentWordHandler = () => {
    const randomWord = words[0] as string;
    setCurrentWord(randomWord);
    const wordIndex = words.indexOf(randomWord);
    words.splice(wordIndex, 1);
    return randomWord;
  };

  const handleInput = (event: FormEvent<HTMLInputElement>) => {
    if (event.currentTarget.value === words[0]) {
    }
  };

  const handleCount = () => {
    let timeLeft = 5;
    let updateTime = false;
    setCount(5);
    setGameResult('');
    const gameInterval = setInterval(() => {
      updateTime = !updateTime;
      if (inputRef.current.value === words[0]) {
        inputRef.current.value = '';
        currentWordHandler();
        if (words.length === 0) {
          clearInterval(gameInterval);
          setGameResult('You Won!');
          return;
        } else {
          setCount(6);
          timeLeft = 6;
        }
      }
      if (!updateTime) {
        return;
      } else {
        timeLeft--;
        setCount((count) => count - 1);
        if (timeLeft === 0) {
          inputRef.current.value = '';
          setGameResult('You Lost');
          clearInterval(gameInterval);
          refetch();
          return;
        }
      }
    }, 500);
    return;
  };
  return (
    <>
      <Head>
        <title>Type Master</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]'>
        <div className='container flex flex-col items-center justify-center gap-12 px-4 py-16 '>
          <b>{gameResult}</b>
          <input
            type='text'
            ref={inputRef}
            className='border'
            onChange={handleInput}
          />
        </div>
        <b className='text-white'>welcome {displayName} </b>
        <b className='text-white'>{count} </b>
        <div>
          {isLoading
            ? 'Loading...'
            : words.map((word: string) => {
                return (
                  <div key={word} className='font-bold '>
                    {word}
                  </div>
                );
              })}
        </div>
        <button className='font-bold text-white' onClick={handleCount}>
          start
        </button>
        <Link
          href='/register'
          onClick={() => {
            localStorage.clear();
          }}
        >
          <p className='text-white hover:underline'>home</p>
        </Link>
      </main>
    </>
  );
};

export default Home;
