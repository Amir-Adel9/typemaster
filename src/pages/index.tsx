/* eslint-disable @next/next/no-img-element */
import { type NextPage } from 'next';
import Head from 'next/head';

import { trpc } from '../utils/trpc';
import { FormEvent, useEffect, useRef, useState } from 'react';

import { useQuery } from '@tanstack/react-query';
import Link from 'next/link';
import router from 'next/router';

const Home: NextPage = () => {
  const [displayName, setDisplayName] = useState('');

  useEffect(() => {
    const storedDisplayName = localStorage.getItem('displayName') as string;
    const isRegistered = storedDisplayName ? true : false;
    if (!isRegistered) {
      router.push('/register');
      return;
    } else {
      setDisplayName(storedDisplayName);
    }
  }, []);

  const { isLoading, refetch } = useQuery(
    ['randomWords'],
    () =>
      fetch('https://random-word-api.herokuapp.com/word?number=30').then(
        (res) => res.json()
      ),
    {
      refetchOnWindowFocus: false,
      onSuccess: (data) => {
        setWords(data);
      },
    }
  );

  const [count, setCount] = useState(5);
  const [words, setWords] = useState(['']);
  const [currentWord, setCurrentWord] = useState('');
  const [gameResult, setGameResult] = useState('');

  const inputRef = useRef() as React.MutableRefObject<HTMLInputElement>;

  const currentWordHandler = () => {
    const randomWord = words[0] as string;
    setCurrentWord(randomWord);
    const wordIndex = words.indexOf(randomWord);
    words.splice(wordIndex, 1);
    return randomWord;
  };

  const handleInput = (event: FormEvent<HTMLInputElement>) => {
    if (event.currentTarget.value === words[0]) {
    }
  };

  const handleCount = () => {
    let timeLeft = 5;
    let updateTime = false;
    setCount(5);
    setGameResult('');
    const gameInterval = setInterval(() => {
      updateTime = !updateTime;
      if (inputRef.current.value === words[0]) {
        inputRef.current.value = '';
        currentWordHandler();
        if (words.length === 0) {
          clearInterval(gameInterval);
          setGameResult('You Won!');
          return;
        } else {
          setCount(6);
          timeLeft = 6;
        }
      }
      if (!updateTime) {
        return;
      } else {
        timeLeft--;
        setCount((count) => count - 1);
        if (timeLeft === 0) {
          inputRef.current.value = '';
          setGameResult('You Lost');
          clearInterval(gameInterval);
          refetch();
          return;
        }
      }
    }, 500);
    return;
  };
  const [isOpen, setIsOpen] = useState(false);
  return (
    <>
      <Head>
        <title>Type Master</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div
        className={`t-0 fixed left-0 z-10 h-full w-[20%] -translate-x-${
          isOpen ? 0 : 96
        } bg-[#222] duration-700 ease-in-out`}
      >
        <button
          className='bg-red-500'
          onClick={() => {
            setIsOpen(false);
          }}
        >
          X
        </button>
      </div>
      <div
        className={`box-border min-h-screen translate-x-${
          isOpen ? 36 : 0
        } bg-gradient-to-b from-[#111] via-[#111] to-[#3e0620] duration-500 ease-in-out`}
      >
        <header className='flex items-center justify-between font-mono text-lg font-bold'>
          <button className='z-20'>
            <img
              src='../../menu.svg'
              className='z-20 m-4 -scale-y-100'
              alt=''
              onClick={() => {
                setIsOpen(true);
              }}
            />
          </button>

          <span className='absolute ml-24 text-[#2fe691]'>Type Master</span>
          <span className='text-[#2fe691]'>Welcome, {displayName}</span>
        </header>
        <main className='flex flex-col items-center justify-center '>
          <div className='flex w-[70%] flex-col items-center justify-center gap-12 px-4 py-16 '>
            <b>{gameResult}</b>
            <div className='w-full bg-[#222] p-5 text-center'>
              <b className=' text-white'>
                You are playing on the{' '}
                <span className='text-[#d0196e]'>[Easy]</span> difficulity & you
                have <span className='text-[#d0196e]'>{count}</span> seconds to
                type the word
              </b>
            </div>
            <input
              type='text'
              ref={inputRef}
              className='w-full border'
              onChange={handleInput}
            />
            <button className=' w-full bg-[#d0196e]' onClick={handleCount}>
              Start Playing
            </button>
            <div className='m-auto mt-5 flex w-full flex-wrap justify-center rounded-lg bg-[#222] p-4 text-center font-poppins text-base font-medium text-white'>
              {isLoading
                ? 'Loading...'
                : words.map((word: string) => {
                    return (
                      <b
                        key={word}
                        className=' m-1 rounded-md bg-[#d0196e] p-[10px]'
                      >
                        {word}
                      </b>
                    );
                  })}
            </div>
          </div>
          <Link
            href='/register'
            onClick={() => {
              localStorage.clear();
            }}
          >
            <p className='text-white hover:underline'>home</p>
          </Link>
        </main>
      </div>
    </>
  );
};

export default Home;
